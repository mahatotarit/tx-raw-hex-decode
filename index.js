const ethers = require('ethers');

// Define the ABI
const abi = [
  {
    inputs: [
      { internalType: 'uint256', name: 'amountToClaim', type: 'uint256' },
      { internalType: 'bytes32[]', name: 'merkleProof', type: 'bytes32[]' },
      { internalType: 'uint256[]', name: 'ids', type: 'uint256[]' },
      { internalType: 'uint256[]', name: 'quantity', type: 'uint256[]' },
      { internalType: 'bool', name: 'claimNFT', type: 'bool' },
      { internalType: 'bool', name: 'isKycRequired', type: 'bool' },
      { internalType: 'uint8', name: 'v', type: 'uint8' },
      { internalType: 'bytes32', name: 'r', type: 'bytes32' },
      { internalType: 'bytes32', name: 's', type: 'bytes32' },
    ],
    name: 'claimDop',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  // ... other ABI entries
];

// Extract the data part of the transaction
const dataPartOfTransaction = '0x83092e470000000000000000000000000000000000000000000000195b7959b388b80000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001445babf88410b782572b01cca2fca05c83bffc60b985dc4088bbcdfbe538fb7e63c6f2ddf353092daee16adfbdde1424ee5ccdb12cea0aa41b1be62e19ffc70c0a5d24d28b7a88e33046790028b8a17b36f9249cdc280278024a77889236176398d369623e9344ffc525579dfdbc671fc25e518eb104817a1a91f52a033565640ca1eddac24be71f7ca4fda4df437018f0e3b919f1ccadb36eba420a7b94bbfc6435617aff15d575c73491015d7cf1fc3d331ffcf071a323dcf03c70802708382da7444bdf995cd6d3417c467e1f2f9488f938408b6ba3c240c4165c2ae4b02a5ad0d07fb92db36329d7747700a706a845b0c133e8513dde24d1c72ba7f9bf8d9e50b569e1e4df0890558e093b4f02dc691f7a974875f50dc57b6d94292a70c0ce94422582c680cad9a69aefdc666bb8387ead34a394898b7c889191376c779e98171825845a9c708b26a8677dab2e44396d6285cc76f3d06b63f41a13cff64f9d08871e9cdc20005f972b0611b6ba08a0e46794c1e3bee6d5daacad57c0259471a5d6a4d588d01ff0186ab4bb5abab1dc8e1ac410fe436a51f2c32e4793cbe552a6c67a2f4be67f744fe1abd7209813ad901d89cb0aa0024a56ee29c964f91313a7284bad673fbacdf325d8f113b91dc665a62b4b141126bf94d1d977d00ad47ef2adefe65e9d918cdbe8eafdcf50a954afc8efbbf23ab1356dfb2d83abee76e70af66395a6d48b193d29385458bd152f59d1ebffd7ff957617cd3c436b9a8fac852d8c4bb565591ea8d7323451a8c37f134eebe430418a8f0a1673fa9703ea78e585ed41a83f638b4165bdbd0adae40c4bc22b09173eda61e52db88fa2b25b313873d0cedc2e2e752fe449bb7c0a0ca3fbeca803ffab475b40171e94f031b5700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

// Create an Interface instance
const iface = new ethers.utils.Interface(abi);

// Decode the function call
const decodedData = iface.decodeFunctionData('claimDop', dataPartOfTransaction);

// Get the function fragment to access parameter names
const functionFragment = iface.getFunction('claimDop');

// Display the decoded data with parameter names
console.log('Decoded Data:');
functionFragment.inputs.forEach((input, index) => {
  console.log(`${input.name}: ${decodedData[index].toString()}`);
});
